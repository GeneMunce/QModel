package QModel;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.Axis;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;

public class Qmodel extends Application {

	@Override
	public void start(Stage primaryStage) {
		primaryStage.setTitle("Qmodel");

		GridPane grid = new GridPane();
		grid.setAlignment(Pos.CENTER);
		grid.setHgap(10);
		grid.setVgap(10);
		grid.setPadding(new Insets(15, 15, 15, 15));
		int row = 0;
		
		Scene scene = new Scene(grid, 600, 600);
		primaryStage.setScene(scene);

		Text scenetitle = new Text("Simulation Parameters");
		scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
		grid.add(scenetitle, 0, row, 4, 1);
		row++;
		
		Label typeLabel = new Label("Type:");
		grid.add(typeLabel, 1, row);

		Label cyclesLabel = new Label("Cycles:");
		grid.add(cyclesLabel, 2, row);

		Label departLabel = new Label("Depart Rate:");
		grid.add(departLabel, 3, row);

		Label numberLabel = new Label("Tokens per release:");
		grid.add(numberLabel, 4, row);
		row++;
		
		Label createLabel = new Label("Create:");
		grid.add(createLabel, 0, row);

		TextField ctTextField = new TextField("0");
		ctTextField.setMaxWidth(30);
		grid.add(ctTextField, 1, row);

		TextField cyclesTextField = new TextField("100000");
		cyclesTextField.setMaxWidth(80);
		grid.add(cyclesTextField, 2, row);

		TextField departureRateTextField = new TextField("1");
		departureRateTextField.setMaxWidth(30);
		grid.add(departureRateTextField, 3, row);

		TextField numberTextField = new TextField("1");
		numberTextField.setMaxWidth(30);
		grid.add(numberTextField, 4, row);
		row++;

		final Text noticeText = new Text();
		grid.add(noticeText, 1, row);

		Button btn = new Button();
		btn.setText("Run");
		HBox hbBtn = new HBox(10);
		hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
		hbBtn.getChildren().add(btn);
		grid.add(hbBtn, 4, row);
		row++;

        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();
        final BarChart<String,Number> bc = 
            new BarChart<String,Number>(xAxis,yAxis);

        bc.setTitle("Histogram");
        xAxis.setLabel("Buckets");       
        yAxis.setLabel("Value");
 
        XYChart.Series<String,Number> series1 = new XYChart.Series<String,Number>();
        series1.setName("Token Response Time");
        for(int i = 0; i < 20; i++) {
            //series1.getData().add(new XYChart.Data(String.valueOf(i), i*2));        	
        }
        bc.getData().addAll(series1);
		grid.add(bc, 0, row, 5,2);
		
		
 
		/*
		 * code to run the simulation
		 */ 
		btn.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				noticeText.setFill(Color.FIREBRICK);
				noticeText.setText("Running.....");
				//System.out.println("Pushed the run Button");
				int ty = Integer.parseInt(ctTextField.getCharacters().toString());
				int cy = Integer.parseInt(cyclesTextField.getCharacters().toString());
				int dr = Integer.parseInt(departureRateTextField.getCharacters().toString());
				int nt = Integer.parseInt(numberTextField.getCharacters().toString());
				Executor exm = new Executor(cy/10, ty, dr, nt);
				TokenStats ts;
				ts = exm.run(cy);
				exm.showStatistics();
				noticeText.setFill(Color.BLACK);
				noticeText.setText("Done");
				int bins = ts.getBins();
				int bin = ts.getBin();
				int[] hist = ts.getCount();
		        for(int i = 0; i < 20; i++) {
		            series1.getData().add(new XYChart.Data(String.valueOf(i*bin), hist[i]));        	
		        }
				grid.add(bc, 0, 5, 5,2);
	
				
			}
		});

		primaryStage.show();
	}

	public static void main(String[] args) {
		launch(args);

	}

}
