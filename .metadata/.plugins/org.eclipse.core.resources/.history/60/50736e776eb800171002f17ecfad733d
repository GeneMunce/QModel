package QModel;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class Create extends LinkedList<Token>{
	/**
	 * 
	 */
	static int currentCreateId = 100;
	private static final long serialVersionUID = -4334563588867927474L;
	private int createId;
	private int createType;
	private int tokensToCreate;
	private int a;
	private int b;
	private int c;
	private Queue<Token> freeTokenList;
	private int releaseTime;
	Random rand;

	/*
	 * 	createType	function	a		b		c
	 * 	0			constant	rate	x		x
	 * 	1			normal		mean	std_dev	x
	 * 	2			triangular	min		max		most likely
	 */

	public Create(int createType, int tokensToCreate, int a, int b, int c, Queue<Token> freeTokenList) {
		super();
		this.rand = new Random();
		this.createType = createType;
		this.tokensToCreate = tokensToCreate;
		this.a = a;
		this.b = b;
		this.c = c;
		this.freeTokenList = freeTokenList;
		this.createId = currentCreateId++;
		switch (createType) {
		case 0:
			releaseTime = a;
			break;
		case 1:
			releaseTime = a;
			break;
		case 2:
			releaseTime = TriangularD(a, b, c);
			break;
		default :
			releaseTime = 0;
			System.out.println("Wrong type sent to Create: " + createId);
		}
	}

	public void tick() {
		
		switch (createType) {
			case 0:
				if(releaseTime-- <= 1) {
					ReleaseTokens();
					releaseTime = a;
				}
				break;
			case 1:
				break;
			case 2:
				if(releaseTime-- <= 0) {
					ReleaseTokens();
					releaseTime = TriangularD(a, b, c);
				}
				break;
			default :
				System.out.println("Wrong type sent to Create: " + createId);
		}
		
	}

	private void ReleaseTokens() {
		for(int i = tokensToCreate; i >= 0; i--) {
			this.add(freeTokenList.poll());
		}
		
	}

	private int TriangularD(int a, int b, int c) {
		int r;
		int p = rand.nextInt(10);
		r = b;
		if(p < 2) { r = a;}
		if(p > 8) { r = c;}
		
		return r;
	}
}

